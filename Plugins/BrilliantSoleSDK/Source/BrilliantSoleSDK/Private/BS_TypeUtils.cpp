// Copyright 2024 Zack Qattan @ Brilliant Sole. All Rights Reserved

#include "BS_TypeUtils.h"

DEFINE_LOG_CATEGORY(LogBS_TypeUtils);

#define ENUM_CONVERSION(EnumValue)                                                         \
    case EBS_DeviceEvent::EnumValue:                                                       \
        UE_LOGFMT(LogBS_TypeUtils, Verbose, "Converting DeviceEventType {0}", #EnumValue); \
        TxRxMessageType = EBS_TxRxMessage::EnumValue;                                      \
        break;

bool BS_TypeUtils::ConvertDeviceEventTypeToTxRxMessageType(EBS_DeviceEvent DeviceEventType, EBS_TxRxMessage &TxRxMessageType)
{
    switch (DeviceEventType)
    {
        ENUM_CONVERSION(IS_BATTERY_CHARGING)
        ENUM_CONVERSION(GET_BATTERY_CURRENT)

        ENUM_CONVERSION(GET_MTU)
        ENUM_CONVERSION(GET_ID)
        ENUM_CONVERSION(GET_NAME)
        ENUM_CONVERSION(SET_NAME)
        ENUM_CONVERSION(GET_TYPE)
        ENUM_CONVERSION(SET_TYPE)
        ENUM_CONVERSION(GET_CURRENT_TIME)
        ENUM_CONVERSION(SET_CURRENT_TIME)

        ENUM_CONVERSION(GET_SENSOR_CONFIGURATION)
        ENUM_CONVERSION(SET_SENSOR_CONFIGURATION)

        ENUM_CONVERSION(GET_PRESSURE_POSITIONS)
        ENUM_CONVERSION(GET_SENSOR_SCALARS)
        ENUM_CONVERSION(SENSOR_DATA)

        ENUM_CONVERSION(GET_VIBRATION_LOCATIONS)

        ENUM_CONVERSION(GET_FILE_TYPES)
        ENUM_CONVERSION(GET_MAX_FILE_LENGTH)
        ENUM_CONVERSION(GET_FILE_TRANSFER_TYPE)
        ENUM_CONVERSION(SET_FILE_TRANSFER_TYPE)
        ENUM_CONVERSION(GET_FILE_LENGTH)
        ENUM_CONVERSION(SET_FILE_LENGTH)
        ENUM_CONVERSION(GET_FILE_CHECKSUM)
        ENUM_CONVERSION(SET_FILE_CHECKSUM)
        ENUM_CONVERSION(SET_FILE_TRANSFER_COMMAND)
        ENUM_CONVERSION(GET_FILE_TRANSFER_STATUS)
        ENUM_CONVERSION(GET_FILE_TRANSFER_BLOCK)
        ENUM_CONVERSION(SET_FILE_TRANSFER_BLOCK)
        ENUM_CONVERSION(FILE_BYTES_TRANSFERRED)

        ENUM_CONVERSION(GET_TFLITE_NAME)
        ENUM_CONVERSION(SET_TFLITE_NAME)
        ENUM_CONVERSION(GET_TFLITE_TASK)
        ENUM_CONVERSION(SET_TFLITE_TASK)
        ENUM_CONVERSION(GET_TFLITE_SAMPLE_RATE)
        ENUM_CONVERSION(SET_TFLITE_SAMPLE_RATE)
        ENUM_CONVERSION(GET_TFLITE_SENSOR_TYPES)
        ENUM_CONVERSION(SET_TFLITE_SENSOR_TYPES)
        ENUM_CONVERSION(IS_TFLITE_READY)
        ENUM_CONVERSION(GET_TFLITE_CAPTURE_DELAY)
        ENUM_CONVERSION(SET_TFLITE_CAPTURE_DELAY)
        ENUM_CONVERSION(GET_TFLITE_THRESHOLD)
        ENUM_CONVERSION(SET_TFLITE_THRESHOLD)
        ENUM_CONVERSION(GET_TFLITE_INFERENCING_ENABLED)
        ENUM_CONVERSION(SET_TFLITE_INFERENCING_ENABLED)
        ENUM_CONVERSION(TFLITE_INFERENCE)

    default:
        UE_LOGFMT(LogBS_TypeUtils, Verbose, "Uncaught DeviceEventType {0}", static_cast<uint8>(DeviceEventType));
        return false;
    }
    return true;
}